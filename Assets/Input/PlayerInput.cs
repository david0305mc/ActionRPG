//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace David
{
    public partial class @PlayerInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""PlayerMosion"",
            ""id"": ""202d1c7b-a633-4550-8c16-b05a2b0047a3"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""fd388aa9-619b-41a2-9238-7d9452558836"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SprintToggle"",
                    ""type"": ""Button"",
                    ""id"": ""a70ae013-3613-4e5f-89cc-7ce6a11676e5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""4fccb7b3-f90b-47ea-a307-e1cd5108d769"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ebfeea0c-e837-4fd8-9d8d-fa4dd56d0ab7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e6d3e257-00cb-48c8-bc8b-cb488c20dd4f"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""eed0ba19-3a0b-465f-81fb-6f15618cba4f"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""935a92c3-fb23-4e68-824e-5b69877ccfc5"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""LeftStick"",
                    ""id"": ""3136cde7-40b1-4502-89fa-bb4a78675d2a"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6919e4a0-6821-4677-9b3b-c7b5da91f6ea"",
                    ""path"": ""<Gamepad>/leftStick/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""030a74a1-58ff-4d55-a1f8-8a3f60654e35"",
                    ""path"": ""<Gamepad>/leftStick/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""4e889dc3-f8dd-46f5-a1da-f719a74b3ae8"",
                    ""path"": ""<Gamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d2e66f34-c2b8-43bc-9777-be09084942c4"",
                    ""path"": ""<Gamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""c687b69f-8de2-4c6b-b6de-2ec3e4315a9e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintToggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PlayerMosion
            m_PlayerMosion = asset.FindActionMap("PlayerMosion", throwIfNotFound: true);
            m_PlayerMosion_Movement = m_PlayerMosion.FindAction("Movement", throwIfNotFound: true);
            m_PlayerMosion_SprintToggle = m_PlayerMosion.FindAction("SprintToggle", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PlayerMosion
        private readonly InputActionMap m_PlayerMosion;
        private List<IPlayerMosionActions> m_PlayerMosionActionsCallbackInterfaces = new List<IPlayerMosionActions>();
        private readonly InputAction m_PlayerMosion_Movement;
        private readonly InputAction m_PlayerMosion_SprintToggle;
        public struct PlayerMosionActions
        {
            private @PlayerInput m_Wrapper;
            public PlayerMosionActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Movement => m_Wrapper.m_PlayerMosion_Movement;
            public InputAction @SprintToggle => m_Wrapper.m_PlayerMosion_SprintToggle;
            public InputActionMap Get() { return m_Wrapper.m_PlayerMosion; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PlayerMosionActions set) { return set.Get(); }
            public void AddCallbacks(IPlayerMosionActions instance)
            {
                if (instance == null || m_Wrapper.m_PlayerMosionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PlayerMosionActionsCallbackInterfaces.Add(instance);
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
                @SprintToggle.started += instance.OnSprintToggle;
                @SprintToggle.performed += instance.OnSprintToggle;
                @SprintToggle.canceled += instance.OnSprintToggle;
            }

            private void UnregisterCallbacks(IPlayerMosionActions instance)
            {
                @Movement.started -= instance.OnMovement;
                @Movement.performed -= instance.OnMovement;
                @Movement.canceled -= instance.OnMovement;
                @SprintToggle.started -= instance.OnSprintToggle;
                @SprintToggle.performed -= instance.OnSprintToggle;
                @SprintToggle.canceled -= instance.OnSprintToggle;
            }

            public void RemoveCallbacks(IPlayerMosionActions instance)
            {
                if (m_Wrapper.m_PlayerMosionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPlayerMosionActions instance)
            {
                foreach (var item in m_Wrapper.m_PlayerMosionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PlayerMosionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PlayerMosionActions @PlayerMosion => new PlayerMosionActions(this);
        public interface IPlayerMosionActions
        {
            void OnMovement(InputAction.CallbackContext context);
            void OnSprintToggle(InputAction.CallbackContext context);
        }
    }
}
